'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FakeInputAutocompleteModule = require('./FakeInputAutocomplete.module.less');

var _FakeInputAutocompleteModule2 = _interopRequireDefault(_FakeInputAutocompleteModule);

var _fuzzysearch = require('fuzzysearch');

var _fuzzysearch2 = _interopRequireDefault(_fuzzysearch);

var _VerticalList = require('../VerticalList');

var _VerticalList2 = _interopRequireDefault(_VerticalList);

var _reactMotion = require('react-motion');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FakeInputAutocomplete = function (_Component) {
  _inherits(FakeInputAutocomplete, _Component);

  function FakeInputAutocomplete(props) {
    _classCallCheck(this, FakeInputAutocomplete);

    var _this = _possibleConstructorReturn(this, (FakeInputAutocomplete.__proto__ || Object.getPrototypeOf(FakeInputAutocomplete)).call(this, props));

    _this.state = {
      value: props.defaultValue,
      isFocused: false
    };
    return _this;
  }

  _createClass(FakeInputAutocomplete, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.defaultValue !== nextProps.defaultValue) {
        this.setState({ value: nextProps.defaultValue });
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (this._input) {
        this._input.focus();
      }
    }
  }, {
    key: 'handleInputChange',
    value: function handleInputChange(event) {
      var value = event.target.value;
      this.setState({ value: value });
      this.props.onChange(event, value);
    }
  }, {
    key: 'handleItemClick',
    value: function handleItemClick(event, key) {
      this.props.onSelect(event, key);
      this._input.blur();
    }
  }, {
    key: 'filterItems',
    value: function filterItems(items, filter, searchQuery) {
      return items.filter(function (item) {
        return filter(item.value, searchQuery);
      });
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      this.focus();
      this.setState({ isFocused: true });
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      this.setState({ isFocused: false });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          defaultValue = _props.defaultValue,
          filter = _props.filter,
          items = _props.items,
          maxSuggessionsHeight = _props.maxSuggessionsHeight,
          onChange = _props.onChange,
          onSelect = _props.onSelect,
          inputElement = _props.inputElement,
          placeholder = _props.placeholder,
          origin = _props.origin,
          restProps = _objectWithoutProperties(_props, ['defaultValue', 'filter', 'items', 'maxSuggessionsHeight', 'onChange', 'onSelect', 'inputElement', 'placeholder', 'origin']);

      var _state = this.state,
          value = _state.value,
          isFocused = _state.isFocused;

      var filteredItems = this.filterItems(items, filter, value);
      var inputProps = _extends({
        ref: function (ref) {
          return _this2._input = ref;
        }.bind(this),
        value: value,
        placeholder: placeholder,
        onChange: this.handleInputChange.bind(this)
      }, restProps);

      var input = inputElement ? inputElement(inputProps) : _react2.default.createElement('input', _extends({ className: _FakeInputAutocompleteModule2.default.input }, inputProps));

      var showSuggessions = isFocused && filteredItems.length;
      var motionPreset = _reactMotion.presets.stiff;
      var suggessionsContainer = _react2.default.createElement(
        _reactMotion.Motion,
        {
          defaultStyle: { x: 0, y: 0 },
          style: {
            x: showSuggessions ? (0, _reactMotion.spring)(maxSuggessionsHeight, motionPreset) : (0, _reactMotion.spring)(0, motionPreset),
            y: showSuggessions ? (0, _reactMotion.spring)(1, motionPreset) : (0, _reactMotion.spring)(0, motionPreset)
          }
        },
        function (interpolatedStyle) {
          return _react2.default.createElement(
            'div',
            {
              className: '\n            ' + _FakeInputAutocompleteModule2.default.suggessionsContainer + '\n            ' + (origin === 'top' ? _FakeInputAutocompleteModule2.default.suggessionsContainerTop : ' ') + '\n          ',
              style: {
                maxHeight: interpolatedStyle.x + 'px',
                opacity: interpolatedStyle.y
              }
            },
            _react2.default.createElement(
              'div',
              { className: _FakeInputAutocompleteModule2.default.suggessions },
              _react2.default.createElement(_VerticalList2.default, {
                items: filteredItems,
                onClick: function onClick(event, key) {
                  return _this2.handleItemClick(event, key);
                }
              })
            )
          );
        }
      );

      return _react2.default.createElement(
        'div',
        {
          ref: function ref(_ref) {
            return _this2._autocomplete = _ref;
          },
          tabIndex: -1,
          className: _FakeInputAutocompleteModule2.default.fakeInputAutocomplete,
          onFocus: this.handleFocus.bind(this),
          onBlur: this.handleBlur.bind(this)
        },
        input,
        suggessionsContainer
      );
    }
  }]);

  return FakeInputAutocomplete;
}(_react.Component);

exports.default = FakeInputAutocomplete;


FakeInputAutocomplete.propTypes = {
  defaultValue: _react.PropTypes.string,
  filter: _react.PropTypes.func,
  inputElement: _react.PropTypes.func,
  placeholder: _react.PropTypes.string,
  items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    key: _react.PropTypes.string,
    value: _react.PropTypes.string
  })),
  onChange: _react.PropTypes.func,
  onSelect: _react.PropTypes.func,
  origin: _react.PropTypes.oneOf(['top', 'bottom']),
  maxSuggessionsHeight: _react.PropTypes.number
};
FakeInputAutocomplete.defaultProps = {
  defaultValue: '',
  filter: function filter(value1, value2) {
    return (0, _fuzzysearch2.default)(value2.toLowerCase(), value1.toLowerCase());
  },
  items: [],
  maxSuggessionsHeight: 320,
  onChange: function onChange() {},
  onSelect: function onSelect() {},
  origin: 'bottom',
  placeholder: ''
};